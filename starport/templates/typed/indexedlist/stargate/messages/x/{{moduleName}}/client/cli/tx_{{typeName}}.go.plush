package cli

import (
    "strconv"

    <%= for (goImport) in mergeGoImports(Indexes, Fields) { %>
    <%= goImport.Alias %> "<%= goImport.Name %>"<% } %>
    "github.com/spf13/cobra"
    "github.com/cosmos/cosmos-sdk/client"
    "github.com/cosmos/cosmos-sdk/client/flags"
    "github.com/cosmos/cosmos-sdk/client/tx"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func CmdCreate<%= TypeName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-<%= TypeName.Kebab %><%= Indexes.String() %><%= Fields.String() %>",
		Short: "Create a new <%= TypeName.Original %>",
		Args:  cobra.ExactArgs(<%= len(Fields) + len(Indexes) %>),
		RunE: func(cmd *cobra.Command, args []string) (err error) {
	  	    // Get indexes
            <%= for (i, field) in Indexes { %> <%= field.CLIArgs("index", i) %>
            <% } %>

	  	    // Get value arguments
        	<%= for (i, field) in Fields { %> <%= field.CLIArgs("arg", i+len(Indexes)) %>
        	<% } %>
			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgCreate<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %><%= for (i, field) in Fields { %>arg<%= field.Name.UpperCamel %>,
                <% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}

func CmdUpdate<%= TypeName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update-<%= TypeName.Kebab %><%= Indexes.String() %> [id]<%= Fields.String() %>",
		Short: "Update an existing <%= TypeName.Original %>",
		Args:  cobra.ExactArgs(<%= len(Fields) + len(Indexes) + 1 %>),
		RunE: func(cmd *cobra.Command, args []string) (err error) {
            // Get indexes
            <%= for (i, field) in Indexes { %> <%= field.CLIArgs("index", i) %>
            <% } %>

            // Get ID
            id, err := strconv.ParseUint(args[<%= len(Indexes) %>], 10, 64)
            if err != nil {
                return err
            }

	        // Get value arguments
        	<%= for (i, field) in Fields { %> <%= field.CLIArgs("arg", i+len(Indexes)+1) %>
        	<% } %>

			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgUpdate<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %>id,
			    <%= for (i, field) in Fields { %>arg<%= field.Name.UpperCamel %>,
            <% } %>)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}

func CmdDelete<%= TypeName.UpperCamel %>() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "delete-<%= TypeName.Kebab %><%= Indexes.String() %> [id]",
		Short: "Delete a <%= TypeName.Original %> by index and id",
		Args:  cobra.ExactArgs(<%= len(Indexes) + 1 %>),
		RunE: func(cmd *cobra.Command, args []string) error {
            // Get indexes
            <%= for (i, field) in Indexes { %> <%= field.CLIArgs("index", i) %>
            <% } %>

            // Get ID
            id, err := strconv.ParseUint(args[<%= len(Indexes) %>], 10, 64)
            if err != nil {
                return err
            }

			clientCtx, err := client.GetClientTxContext(cmd)
			if err != nil {
				return err
			}

			msg := types.NewMsgDelete<%= TypeName.UpperCamel %>(
			    clientCtx.GetFromAddress().String(),
			    <%= for (i, index) in Indexes { %>index<%= index.Name.UpperCamel %>,
                <% } %>id,
			)
			if err := msg.ValidateBasic(); err != nil {
				return err
			}
			return tx.GenerateOrBroadcastTxCLI(clientCtx, cmd.Flags(), msg)
		},
	}

	flags.AddTxFlagsToCmd(cmd)

    return cmd
}
